# [gcode_macro PURGE_BUCKET]
# gcode:
#     SAVE_GCODE_STATE NAME=PURGE
#     G92 E0 ; Reset Extruder
#     G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
#     G1 X10 Y20 Z0.3 F5000.0 ; Move to start position
#     G1 X180 Y20.0 Z0.24 F1500.0 E8 ; Draw the first line
#     G1 X180 Y20.4 Z0.24 F5000.0 ; Move to side a little
#     G1 X10 Y20.4 Z0.24 F1500.0 E8 ; Draw the second line
#     G92 E0 ; Reset Extruder
#     G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
#     G1 X10 Y24 Z0.2 F5000.0 ; Move over to prevent blob squish
#     RESTORE_GCODE_STATE NAME=PURGE

[gcode_macro PRINT_START]
gcode:
    STATUS_PRINTING
    {% set bed_temp = params.BED|default('60') %}
    {% set extruder_temp = params.EXTRUDER|default('205') %}
    {% set chamber_temp = params.CHAMBER|default('0') %}
    {% set filament_type = params.FTYPE|default('PLA') %}
    {% set spool = params.FID|default('3DLine_PLA_Black')|string %}
    # {% if filament_type == 'ABS' %}
    #     M142 S55
    #     SET_RETRACTION RETRACT_LENGTH=0.72
    # {% elif filament_type == 'ABS+' %}
    #     M142 S50
    #     SET_RETRACTION RETRACT_LENGTH=0.32
    # {% elif filament_type == 'ASA' %}
    #     M142 S50
    #     SET_RETRACTION RETRACT_LENGTH=0.72
    # {% elif filament_type == 'PLA' %}
    #     M142 S30
    #     SET_RETRACTION RETRACT_LENGTH=0.32
    # {% elif filament_type == 'HRPLA' %}
    #     M142 S30
    #     SET_RETRACTION RETRACT_LENGTH=0.82
    # {% elif filament_type == 'PETG' %}
    #     M142 S30
    #     SET_RETRACTION RETRACT_LENGTH=0.32
    # {% endif %}
    _GET_SPOOL_ID NAME={spool}

    M140 S{bed_temp}
    CG28
    SET_VGB ENABLE=1
    G4 P1000
    STATUS_CLEANING
    NOZZLECLEAN
    #STATUS_CALIBRATING_Z
    #MESH_LOAD AUTO=true
    CALIBRATE_Z
    

    M117 Starting warmup
    STATUS_HEATING
    G1 Z10 F3000                       ; move nozzle away from bed
    M117 Warmup
  	M104 S{extruder_temp|int}
    
    M141 S{chamber_temp}
	
    M190 S{bed_temp}                        ; set bed temp and wait for it reach temp
    M109 S{extruder_temp|int}               ; M109 heat and wait for it to reach temp
    M300
    M117 It is woooooorm!!

    G1 Z5 F5000                        ; move head 5mm from bed surface
    M83                                ; Make the E relative independant of other axis
    # M117 First line
    # G92 E0 ; Reset Extruder
    # G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    # G1 X5 Y5 Z0.3 F5000.0 ; Move to start position
    # G1 X120 Y5.0 Z0.2 F1500.0 E8 ; Draw the first line
    # G1 X120 Y5.4 Z0.2 F5000.0 ; Move to side a little
    # G1 X5 Y5.4 Z0.2 F1500.0 E8 ; Draw the second line
    # G92 E0 ; Reset Extruder
    # G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    # G1 X5 Y8 Z0.15 F5000.0 ; Move over to prevent blob squish
    # G1 E-0.5 F500 ; retract filament (0.5)
    # M117 Starting Print
    STATUS_CLEANING
    NOZZLECLEAN
    STATUS_PRINTING
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[gcode_macro PRINT_END]
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    ##### Get Boundaries #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set current_z = printer.toolhead.position.z|float %}
    {% set filament_type = params.FTYPE|default('PLA') %}
    ##### Calculate save move #####
    {% if current_z < (max_z - 2.0) %}
        {% set move_z = 2.0 %}
    {% else %}
        {% set move_z = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    M400                                     ; wait for buffer to clear
    G92 E0                                   ; zero the extruder
    M83                                      ; relative extrusion
    G1 E-1.0 F3600                           ; retract filament
    G91                                      ; relative positioning
    G0 Z{move_z} F1200  ; move nozzle to remove stringing
    G90
    ### MOVE X/Y AWAY FROM PRINT
    G1 X310 Y310 F1800
    M400                           ; wait for buffer to clear
    TIMELAPSE_TAKE_FRAME
    HYPERLAPSE_STOP
    _ADD_PRINT_TIME
    _SD_PRINT_STATS R='done'
    _SD_PRINTER_STATS
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    SET_VGB ENABLE=0
    BED_MESH_CLEAR
    #M142 S45
    UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
    # {% if filament_type == 'ABS' %}
    #     M142 S30
    # {% elif filament_type == 'ABS+' %}
    #     M142 S30
    # {% elif filament_type == 'ASA' %}
    #     M142 S30
    # {% elif filament_type == 'PLA' %}
    #     M142 S25
    # {% elif filament_type == 'HRPLA' %}
    #     M142 S25
    # {% else %}
    #     M142 S30
    # {% endif %}
    # {% set endstop_start = printer["gcode_macro PRINT_START"].endstop %}
    # {% set endstop_end = printer['temperature_sensor endstop'].temperature %}
    # _PRINT_AR T="{"PRINT_END done. Endstop temp START:%2.2fC END:%2.2fC" % (endstop_start, endstop_end)}"
    TIMELAPSE_RENDER
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro NOZZLECLEAN]
description: Move to bucket and scrub nozzle
gcode:
  ##### get user defines #####
  {% set add_temp = printer['gcode_macro _USER_VARIABLE'].extruder_min_add|int %}
  {% set purge_pos = printer['gcode_macro _USER_VARIABLE'].purge %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
   ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### end of definitions #####
  SAVE_GCODE_STATE Name=STATE_NOZZLECLEAN
  _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
  CG28                                    ; home if not already homed
  G90                                      ; absolute positioning
  {% if act_z < z_hop %}
        G1 Z{z_hop} F900                       ; move head up
      {% endif %}
      G1 X{purge_pos[0]} Y{purge_pos[1]} F9000 ; move to purge bucket location
      {% if printer.extruder.can_extrude|lower == 'false' %}
          {action_respond_info("Extruder Temp to low to extrude")}
      {% else %}
      G1 Z{purge_pos[2]} F900  ; lower Z
      G92 E0                   ; reset Extruder
      M83                      ; relative extrusion
      G1 E5.00 F500            ; purge filament (5mm)
      G1 E5.00 F800            ; purge filament (5mm)
      G1 E-0.5 F800            ; retract filament (0.5)
      {% endif %}

  _WIPE
  # restore old extruder temperature
  #M109 S{extruder_target}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE Name=STATE_NOZZLECLEAN

[gcode_macro _WIPE]
description: Helper: Wipe nozzle at bucket
gcode:
  ##### get user defines #####
  {% set wipe_cnt = printer['gcode_macro _USER_VARIABLE'].wipe_cnt|int %}
  {% set wipe_start_pos = printer['gcode_macro _USER_VARIABLE'].wipe_start %}
  {% set wipe_end_pos = printer['gcode_macro _USER_VARIABLE'].wipe_end %}
  {% set wipe_offset = printer['gcode_macro _USER_VARIABLE'].wipe_offset|float %}
  ##### end of definitions #####
  G90 ; absolute positioning
  G0 X{wipe_start_pos[0]} Y{wipe_start_pos[1]} Z{wipe_start_pos[2]} F6000
  # move head diagonal to brush
  {% for wipe in range(0, wipe_cnt) %}
    {% for coordinate in [wipe_start_pos[0], wipe_end_pos[0]] %}
      G0 X{coordinate} Y{wipe_start_pos[1] + wipe_offset * wipe} F8000
    {% endfor %}
  {% endfor %}
  G0 X{wipe_end_pos[0]} Y{wipe_end_pos[1]} Z{wipe_end_pos[2]} F6000
    
[gcode_macro PRIME_LINE]
description: Purge nozzle front left
gcode:
  ##### get user defines #####
  {% set start_xy = printer['gcode_macro _USER_VARIABLE'].prime_start_xy %}
  {% set dir = printer['gcode_macro _USER_VARIABLE'].prime_dir|string %}
  {% set lenght = printer['gcode_macro _USER_VARIABLE'].prime_lenght|float %}
  {% set seg = printer['gcode_macro _USER_VARIABLE'].prime_seg|int %}
  {% set extrude_per_seg = printer['gcode_macro _USER_VARIABLE'].prime_extrude_per_seg|float %}
  {% set prime_z = printer['gcode_macro _USER_VARIABLE'].prime_z|float %}
  {% set move_between_lines = printer['gcode_macro _USER_VARIABLE'].prime_dist|float %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop|float %}
  ##### get parameter and set default #####
  {% set prime_height = params.PRIME_HEIGHT|default(prime_z)|float %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### calculate prime line moves #####
  {% set seg_delta = lenght / seg %}
  {% if dir == 'X+' %}
    {% set first_line = 'X%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set second_line = 'X-%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set move_to_side = 'Y%s' % (move_between_lines) %}
  {% elif dir == 'X-' %}
    {% set first_line = 'X-%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set second_line = 'X%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set move_to_side = 'Y%s' % (move_between_lines) %}
  {% elif dir == 'Y+' %}
    {% set first_line = 'Y%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set second_line = 'Y-%s E%s F1500' % (seg_delta, extrude_per_seg) %}
   {% set move_to_side = 'X%s' % (move_between_lines) %}
  {% elif dir == 'Y-' %}
    {% set first_line = 'Y-%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set second_line = 'Y%s E%s F1500' % (seg_delta, extrude_per_seg) %}
    {% set move_to_side = 'X%s' % (move_between_lines) %}
  {% else %}
    {action_raise_error("_USER_VARIABLE.prime_dir is not spezified as X+, X-, Y+ or Y-")}
  {% endif %} 
  ##### end of definitions #####
  _PRINT_AR T="Prime Line" SHOW_LCD=true
  CG28                                   ; home if not already homed
  G92 E0                                  ; reset Extruder
  G90                                     ; absolute positioning
  {% if act_z < z_hop %}
    G1 Z{z_hop} F900                      ; move head up
  {% endif %}
  G1 X{start_xy[0]} Y{start_xy[1]} F18000 ; move to start position
  G1 Z{prime_height} F900                 ; move Z Axis down
  G91                                     ; relative positioning
  {% for segment in range(seg) %}         ; draw the first line
    G1 {first_line}
  {% endfor %}    
  G1 {move_to_side}                       ; move to side
  {% for segment in range(seg) %}         ; draw the second line
    G1 {second_line}
  {% endfor %}
  G1 Z{z_hop} F1500                       ; move Z Axis up
  G92 E0                                  ; reset Extruder
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1

# ## purge and clean the nozzle in prep for printing    
# [gcode_macro NOZZLECLEAN]
# gcode:
#   # store min extrution temp in variable
#   # {% set minimTemp = printer.configfile.config["extruder"]["min_extrude_temp"] %}
#   SAVE_GCODE_STATE Name=STATE_NOZZLECLEAN
#   _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
#   CG28                  ; home if not already homed
#   G90                    ; absolute positioning
#   G1 Y150 F18000
#   G1 X300 Y392 Z10 F18000  ; move to purge bucket location
#   # # check the Extruder temp is above minimum extrution temp
#   # {% set extruder_target = printer.extruder.target %}
#   # {% if printer.extruder.temperature|int < minimTemp|int %}
#   #   _PRINT_AR T="{"Extruder Temp to low heat to %2dC" % (minimTemp|int + 30)}"
#   #   M109 S{minTemp|int + 30} ; heat extruder and wait
#   # {% endif %}
#   # G1 Z5.5 F900  ; lower Z
#   # G92 E0        ; reset Extruder
#   # M83           ; relative extrusion
#   # G1 E5.00 F300 ; purge filament (5mm)
#   # G1 E5.00 F500 ; purge filament (5mm)
#   # G1 E-1.0 F500 ; retract filament (1)
#   # M400
#   # G1 E-0.8 F500 ; retract filament (1)
#   _WIPE
#   # restore old extruder temperature
#   # M109 S{extruder_target}
#   UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
#   RESTORE_GCODE_STATE Name=STATE_NOZZLECLEAN

# [gcode_macro _WIPE]
# description: Helper: Wipe nozzle at bucket
# gcode:
#   ##### get user defines #####
#   {% set wipe_cnt = printer['gcode_macro _USER_VARIABLE'].wipe_cnt|int %}
#   {% set wipe_z = printer['gcode_macro _USER_VARIABLE'].wipe_z|float %}
#   {% set wipe_start_x = printer['gcode_macro _USER_VARIABLE'].wipe_start_x|float %}
#   {% set wipe_end_x = printer['gcode_macro _USER_VARIABLE'].wipe_end_x|float %}
#   {% set wipe_start_y = printer['gcode_macro _USER_VARIABLE'].wipe_start_y|float %}
#   {% set wipe_end_y = printer['gcode_macro _USER_VARIABLE'].wipe_end_y|float %}
#   {% set wipe_offset_y = printer['gcode_macro _USER_VARIABLE'].wipe_offset_y|float %}
#   ##### end of definitions #####
#   G90 ; absolute positioning
#   G0 X{wipe_start_x} Y{wipe_start_y} Z{wipe_z} F4000
#   # move head diagonal to brush
#   {% for wipe in range(0, wipe_cnt) %}
#     {% for coordinate in [wipe_start_x, wipe_end_x] %}
#       G0 X{coordinate} Y{wipe_start_y + wipe_offset_y * wipe} F6000
#     {% endfor %}
#   {% endfor %}
#   G0 X{wipe_end_x} Y{wipe_end_y} F4000
    
# [gcode_macro PRIME_LINE]
# gcode:
#   # define values for easiermodification
#   {% set seg = 11 %}
#   {% set lenght = 220 %}
#   {% set extrude = 22 %}
#   SAVE_GCODE_STATE NAME=STATE_PRIME_LINE
#   # calculate values of each segment
#   {% set x_seg = lenght|float / seg|float %}
#   {% set e_seg = extrude|float / seg|float %}
#   _PRINT_AR T="Prime Line" SHOW_LCD=true
#   CG28                                  ; home if not already homed
#   G92 E0                                 ; reset Extruder
#   G90                                    ; absolute positioning
#   G1 X5 Y2 Z5 F10000                    ; move to start position
#   G1 Z0.24 F900                          ; move Z Axis down
#   M83                                    ; relative extrusion
#   G91                                    ; relative positioning
#   {% for segment in range(seg|int-1) %}  ; draw the first line
#     G1 X{x_seg} E{e_seg} F1500.0
#   {% endfor %}    
#   G1 Y0.4                                ; move to side
#   {% for segment in range(seg|int-1) %}  ; draw the second line
#     G1 X-{x_seg} E{e_seg} F1500.0
#   {% endfor %}
#   G1 Z5.0 F1500                          ; move Z Axis up
#   G92 E0                                 ; reset Extruder
#   UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
#   _PRINT_AR T="Start printing" SHOW_LCD=true
#   RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

[gcode_macro SDCARD_RESET_FILE]
description: Reset printing from SD-card
rename_existing: SDCARD_RESET_FILE_BASIC
gcode:
  SDCARD_RESET_FILE_BASIC